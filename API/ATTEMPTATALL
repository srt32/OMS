# this script will take the school_DB dump and parse it to pull out the around_latitudes, name, id 
	# for the input school name -- Example = "University of Denver"
# this data is then passed to OSMAPICall.py
def getDBSchoolData(fileName,schoolName,outputName):
	print "STARTING getDBSchoolData"
	import sys
	import re
	import xml.etree.ElementTree as ET
	intputFile = open(sys.argv[1])

	tree = ET.parse(intputFile)
	root = tree.getroot()

	outputName = outputName

	target = 0
	for row in root.findall('row'):
		for field in row.findall('field'):
			key = field.get('name')
			value = field.text
			if key == "id":
				school_id_local = value
			if value == schoolName and key == "title":
				target = 1
				name = str(value)
				# print name,
			if target == 1 and key == "around_latitudes":
				school_id = school_id_local
				# print school_id,
				around_lats = value
				# print around_lats
				target = 0

	# format output for global vars
	# parse the results into "left,bot,right,top,schoolName,schoolID" using around_lats, name, school_id
	lats_list = around_lats.split('],')
	A = lats_list[0]
	A = re.sub('[[]', '', A)
	A = re.sub('[]]', '', A)
	A = A.split(',')
	global top
	top = A[0]
	print "top is " + top

	B = lats_list[1]
	B = re.sub('[[]', '', B)
	B = re.sub('[]]', '', B)
	B = B.split(',')
	global right
	right = B[1]
	print "right is " + right

	C = lats_list[2]
	C = re.sub('[[]', '', C)
	C = re.sub('[]]', '', C)
	C = C.split(',')
	global bot
	bot = C[0]
	print "bot is " + bot

	D = lats_list[3]
	D = re.sub('[[]', '', D)
	D = re.sub('[]]', '', D)
	D = D.split(',')
	global left
	left = D[1]
	print "left is " + left

	schoolName = schoolName 
	print schoolName
	list.append(schoolName)
	schoolID = school_id 
	print schoolID

	print "COMPLETED getDBSchoolData"
	# if __name__ == '__main__':
 # 		import sys
	#  	getDBSchoolData(sys.argv[1],sys.argv[2])




# this script is fed data from getDBSChoolData.py (around_lat, id, name)
# this data is then passed to OSMDataParse.py, which will need to output a CSV (to be uploaded)
# EXAMPLE CALL -- python subProcessTest.py 11.54 48.14 11.543 48.145 testAPIOutput_2.txt
# get the bounds from it and pass it to OSM_API_Call
def OSMAPICall(left,bot,right,top,outputName,schoolName,schoolID):
	"STARTING OSMAPICall"
	import subprocess

	fileName = str(outputName) # "testAPIOutput_2.txt" 
	o_file = open(fileName, "w")

	left = str(left) # str(11.54) 
	bottom = str(bot) # str(48.14)
	right = str(right) # str(11.543)
	top = str(top) # str(48.145)

	link = "http://api.openstreetmap.org/api/0.6/map?bbox=" + left + "," + bottom + "," + right + "," + top

	cmdCall = "curl " + '"' + link + '"'

	subprocess.call(cmdCall, shell=True, stdout = o_file)
	# print "Data output to " + str(fileName)

	print "COMPLETED OSMAPICall"

 	# if __name__ == '__main__':
 	#  	import sys
 	#  	OSMAPICall(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7])



# this files reads in the output file from OSMAPICall.py
# this file outputs a CSV that is compatible to be rake loaded into RAILS app
def OSMParseForRails(inputFile):
	import xml.etree.ElementTree as ET
	import sys
	intputFile = open(inputFile)
	delta = 0.0001090911074 # = 40 equator-feet
	# export data from here, http://www.openstreetmap.org/

	tree = ET.parse(intputFile)
	root = tree.getroot()

	# for import to RAILS:  :gmaps, :latitude, :longitude, :name

	print "gmaps, latitude, longitude, name"

	for node in root.findall('node'):
		nid = node.get('id')
		lat = node.get('lat')
		lon = node.get('lon')
		for tag in node.findall('tag'):
			k = tag.get('k')  # needs to find the tag with k="name"
			v = tag.get('v')
			if k == "name":
				Ax = float(lat) - delta
				Ay = float(lon) + delta
				Bx = float(lat) + delta
				By = float(lon) + delta
				Cx = float(lat) + delta
				Cy = float(lon) - delta
				Dx = float(lat) - delta
				Dy = float(lon) - delta
				print "t" + ",",
				print Ax, 
				print ",",
				print Ay, 
				print ",",
				print v
				print "t" + ",",
				print Bx, 
				print ",",
				print By, 
				print ",",
				print v
				print "t" + ",",
				print Cx, 
				print ",",
				print Cy, 
				print ",",
				print v
				print "t" + ",",
				print Dx, 
				print ",",
				print Dy, 
				print ",",
				print v
	print "OSMAPICall IS COMPLETE"
	
	# if __name__ == '__main__':
 # 		import sys
 # 		OSMParseForRails(sys.argv[1])


def main(fileName,schoolName,outputName):
	import sys
	from getDBSchoolData import getDBSchoolData
	from OSMAPICall import OSMAPICall
	from OSMParseForRails import OSMParseForRails

	left,bot,right,top,outputName,schoolName,schoolID = getDBSchoolData(fileName,schoolName,outputName)
	inputFile = OSMAPICall(left,bot,right,top,outputName,schoolName,schoolID) # need to sync up outputName from above with inputFile from below
	OSMParseForRails(inputFile) # needs to be piped somewhere

	# rake the piped output file in rails app to review DP's
	print "OSM_All IS COMPLETE"
 	# if __name__ == '__main__':
 	# 	import sys
 	# 	main(sys.argv[1],sys.argv[2])

import sys
main(sys.argv[1], sys.argv[2], sys.argv[3])